// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PrimalBlaze.Threading.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WhenAllCompleteOrOneFaultsFeature : Xunit.IClassFixture<WhenAllCompleteOrOneFaultsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WhenAllCompleteOrOneFaults.feature"
#line hidden
        
        public WhenAllCompleteOrOneFaultsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WhenAllCompleteOrOneFaults", "\tIn order to run two or more parallel tasks efficiently\r\n\tAs a developer\r\n\tI want" +
                    " to be notified when one fails and have the option of requesting the cancellatio" +
                    "n of its peers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(WhenAllCompleteOrOneFaultsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the second is longer")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the second is longer")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheSecondIsLonger()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the second is longer", new string[] {
                        "2tasks"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I prepare a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I prepare a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I await them using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.Then("both Tasks are RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.And("the results are 2,5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the first is longer")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the first is longer")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheFirstIsLonger()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the first is longer", new string[] {
                        "2tasks"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I prepare a Task which increments a number every 50ms until 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.And("I prepare a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.When("I await them using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.Then("both Tasks are RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
 testRunner.And("the results are 4,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the first fails immediately in synchronous code")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the first fails immediately in synchronous code")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheFirstFailsImmediatelyInSynchronousCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the first fails immediately in synchronous code", new string[] {
                        "2tasks"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I prepare a Task which throws an Exception prior to executing any async code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.And("I prepare a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("I await them using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.And("the second Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("the results are 0,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the second fails immediately in synchronous code")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the second fails immediately in synchronous code")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheSecondFailsImmediatelyInSynchronousCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the second fails immediately in synchronous code", new string[] {
                        "2tasks"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I prepare a Task which increments a number every 50ms until 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.And("I prepare a Task which throws an Exception prior to executing any async code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.When("I await them using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.Then("the first Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("the results are 1,0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the first fails midway through some async work, by whi" +
            "ch time the second has already completed")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the first fails midway through some async work, by whi" +
            "ch time the second has already completed")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheFirstFailsMidwayThroughSomeAsyncWorkByWhichTimeTheSecondHasAlreadyCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the first fails midway through some async work, by whi" +
                    "ch time the second has already completed", new string[] {
                        "2tasks"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I prepare a Task which increments a number every 50ms until 5 but throws an Excep" +
                    "tion after 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("I prepare a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.When("I await them using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.And("the second Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("the results are 3,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the second fails midway through some async work, by wh" +
            "ich time the first has already completed")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the second fails midway through some async work, by wh" +
            "ich time the first has already completed")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheSecondFailsMidwayThroughSomeAsyncWorkByWhichTimeTheFirstHasAlreadyCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the second fails midway through some async work, by wh" +
                    "ich time the first has already completed", new string[] {
                        "2tasks"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 62
 testRunner.Given("I prepare a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.And("I prepare a Task which increments a number every 50ms until 5 but throws an Excep" +
                    "tion after 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.When("I await them using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.Then("the first Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("the results are 2,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the first fails midway through some async work, the se" +
            "cond proceeds unaffected")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the first fails midway through some async work, the se" +
            "cond proceeds unaffected")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheFirstFailsMidwayThroughSomeAsyncWorkTheSecondProceedsUnaffected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the first fails midway through some async work, the se" +
                    "cond proceeds unaffected", new string[] {
                        "2tasks"});
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("I prepare a Task which increments a number every 50ms until 2 but throws an Excep" +
                    "tion after 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.And("I prepare a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.When("I await them using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.And("the second Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.And("the results are 1,5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the second fails midway through some async work, the f" +
            "irst proceeds unaffected")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the second fails midway through some async work, the f" +
            "irst proceeds unaffected")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheSecondFailsMidwayThroughSomeAsyncWorkTheFirstProceedsUnaffected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the second fails midway through some async work, the f" +
                    "irst proceeds unaffected", new string[] {
                        "2tasks"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
 testRunner.Given("I prepare a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
 testRunner.And("I prepare a Task which increments a number every 50ms until 2 but throws an Excep" +
                    "tion after 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.When("I await them using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.Then("the first Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.And("the results are 5,1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the first fails immediately in synchronous code, the s" +
            "econd is cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the first fails immediately in synchronous code, the s" +
            "econd is cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheFirstFailsImmediatelyInSynchronousCodeTheSecondIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the first fails immediately in synchronous code, the s" +
                    "econd is cancelled", new string[] {
                        "2tasks"});
#line 97
this.ScenarioSetup(scenarioInfo);
#line 98
 testRunner.Given("I prepare a Task which throws an Exception prior to executing any async code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
 testRunner.And("I prepare a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.When("I await them using WhenAllCompleteOrOneFaults with the Cancel Others option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
 testRunner.And("the second Task is Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("the results are 0,0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the second fails immediately in synchronous code, the " +
            "first is cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the second fails immediately in synchronous code, the " +
            "first is cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheSecondFailsImmediatelyInSynchronousCodeTheFirstIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the second fails immediately in synchronous code, the " +
                    "first is cancelled", new string[] {
                        "2tasks"});
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
 testRunner.Given("I prepare a Task which increments a number every 50ms until 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
 testRunner.And("I prepare a Task which throws an Exception prior to executing any async code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.When("I await them using WhenAllCompleteOrOneFaults with the Cancel Others option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.Then("the first Task is Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.And("the results are 0,0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the first fails midway through some async work, the se" +
            "cond depends on it but has already completed so is not cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the first fails midway through some async work, the se" +
            "cond depends on it but has already completed so is not cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheFirstFailsMidwayThroughSomeAsyncWorkTheSecondDependsOnItButHasAlreadyCompletedSoIsNotCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the first fails midway through some async work, the se" +
                    "cond depends on it but has already completed so is not cancelled", new string[] {
                        "2tasks"});
#line 121
this.ScenarioSetup(scenarioInfo);
#line 122
 testRunner.Given("I prepare a Task which increments a number every 50ms until 5 but throws an Excep" +
                    "tion after 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 123
 testRunner.And("I prepare a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.When("I await them using WhenAllCompleteOrOneFaults with the Cancel Others option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 127
 testRunner.And("the second Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.And("the results are 3,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the second fails midway through some async work, the f" +
            "irst depends on it but has already completed so is not cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the second fails midway through some async work, the f" +
            "irst depends on it but has already completed so is not cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheSecondFailsMidwayThroughSomeAsyncWorkTheFirstDependsOnItButHasAlreadyCompletedSoIsNotCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the second fails midway through some async work, the f" +
                    "irst depends on it but has already completed so is not cancelled", new string[] {
                        "2tasks"});
#line 133
this.ScenarioSetup(scenarioInfo);
#line 134
 testRunner.Given("I prepare a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 135
 testRunner.And("I prepare a Task which increments a number every 50ms until 5 but throws an Excep" +
                    "tion after 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.When("I await them using WhenAllCompleteOrOneFaults with the Cancel Others option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.Then("the first Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 139
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("the results are 2,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the first fails midway through some async work, the se" +
            "cond depends on it so is cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the first fails midway through some async work, the se" +
            "cond depends on it so is cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheFirstFailsMidwayThroughSomeAsyncWorkTheSecondDependsOnItSoIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the first fails midway through some async work, the se" +
                    "cond depends on it so is cancelled", new string[] {
                        "2tasks"});
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
 testRunner.Given("I prepare a Task which increments a number every 50ms until 2 but throws an Excep" +
                    "tion after 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
 testRunner.And("I prepare a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.When("I await them using WhenAllCompleteOrOneFaults with the Cancel Others option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 151
 testRunner.And("the second Task is probably Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And("the first Result is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And("the second Result is probably less than or equal to 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two tasks run in parallel, the second fails midway through some async work, the f" +
            "irst depends on it so is cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two tasks run in parallel, the second fails midway through some async work, the f" +
            "irst depends on it so is cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        public virtual void TwoTasksRunInParallelTheSecondFailsMidwayThroughSomeAsyncWorkTheFirstDependsOnItSoIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tasks run in parallel, the second fails midway through some async work, the f" +
                    "irst depends on it so is cancelled", new string[] {
                        "2tasks"});
#line 158
this.ScenarioSetup(scenarioInfo);
#line 159
 testRunner.Given("I prepare a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 160
 testRunner.And("I prepare a Task which increments a number every 50ms until 2 but throws an Excep" +
                    "tion after 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.When("I await them using WhenAllCompleteOrOneFaults with the Cancel Others option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 162
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.Then("the first Task is probably Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 164
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
 testRunner.And("the first Result is probably less than or equal to 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.And("the second Result is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the second is longer")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the second is longer")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheSecondIsLonger()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the second is longer", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 202
this.ScenarioSetup(scenarioInfo);
#line 203
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 204
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 206
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
 testRunner.Then("both Tasks are RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 208
 testRunner.And("the results are 2,5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the first is longer")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the first is longer")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheFirstIsLonger()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the first is longer", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 211
this.ScenarioSetup(scenarioInfo);
#line 212
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 213
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 215
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.Then("both Tasks are RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 217
 testRunner.And("the results are 4,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the first fails immediately in synch" +
            "ronous code")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the first fails immediately in synch" +
            "ronous code")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheFirstFailsImmediatelyInSynchronousCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the first fails immediately in synch" +
                    "ronous code", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 220
this.ScenarioSetup(scenarioInfo);
#line 221
 testRunner.Given("I prepare a Factory for a Task which throws an Exception prior to executing any a" +
                    "sync code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 222
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 224
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 226
 testRunner.And("the second Task is Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
 testRunner.And("the results are 0,0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 228
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the second fails immediately in sync" +
            "hronous code")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the second fails immediately in sync" +
            "hronous code")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheSecondFailsImmediatelyInSynchronousCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the second fails immediately in sync" +
                    "hronous code", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 232
this.ScenarioSetup(scenarioInfo);
#line 233
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 234
 testRunner.And("I prepare a Factory for a Task which throws an Exception prior to executing any a" +
                    "sync code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 236
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
 testRunner.Then("the first Task is Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 238
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
 testRunner.And("the first Result is probably less than or equal to 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
 testRunner.And("the second Result is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the first fails midway through some " +
            "async work, by which time the second has already completed")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the first fails midway through some " +
            "async work, by which time the second has already completed")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheFirstFailsMidwayThroughSomeAsyncWorkByWhichTimeTheSecondHasAlreadyCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the first fails midway through some " +
                    "async work, by which time the second has already completed", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 245
this.ScenarioSetup(scenarioInfo);
#line 246
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 5 but t" +
                    "hrows an Exception after 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 247
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 249
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 251
 testRunner.And("the second Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.And("the results are 3,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the second fails midway through some" +
            " async work, by which time the first has already completed")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the second fails midway through some" +
            " async work, by which time the first has already completed")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheSecondFailsMidwayThroughSomeAsyncWorkByWhichTimeTheFirstHasAlreadyCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the second fails midway through some" +
                    " async work, by which time the first has already completed", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 257
this.ScenarioSetup(scenarioInfo);
#line 258
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 259
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 5 but t" +
                    "hrows an Exception after 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 261
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 262
 testRunner.Then("the first Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 263
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.And("the results are 2,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the first fails midway through some " +
            "async work, the second proceeds unaffected")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the first fails midway through some " +
            "async work, the second proceeds unaffected")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheFirstFailsMidwayThroughSomeAsyncWorkTheSecondProceedsUnaffected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the first fails midway through some " +
                    "async work, the second proceeds unaffected", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 269
this.ScenarioSetup(scenarioInfo);
#line 270
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 2 but t" +
                    "hrows an Exception after 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 271
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 273
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 275
 testRunner.And("the second Task is Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 276
 testRunner.And("the first Result is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 277
 testRunner.And("the second Result is probably less than or equal to 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the second fails midway through some" +
            " async work, the first proceeds unaffected")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the second fails midway through some" +
            " async work, the first proceeds unaffected")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheSecondFailsMidwayThroughSomeAsyncWorkTheFirstProceedsUnaffected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the second fails midway through some" +
                    " async work, the first proceeds unaffected", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 282
this.ScenarioSetup(scenarioInfo);
#line 283
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 284
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 2 but t" +
                    "hrows an Exception after 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 286
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 287
 testRunner.Then("the first Task is Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 288
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
 testRunner.And("the first Result is probably less than or equal to 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
 testRunner.And("the second Result is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the first fails midway through some " +
            "async work, the second depends on it but has already completed so is not cancell" +
            "ed")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the first fails midway through some " +
            "async work, the second depends on it but has already completed so is not cancell" +
            "ed")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheFirstFailsMidwayThroughSomeAsyncWorkTheSecondDependsOnItButHasAlreadyCompletedSoIsNotCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the first fails midway through some " +
                    "async work, the second depends on it but has already completed so is not cancell" +
                    "ed", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 295
this.ScenarioSetup(scenarioInfo);
#line 296
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 5 but t" +
                    "hrows an Exception after 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 297
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 299
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 301
 testRunner.And("the second Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
 testRunner.And("the results are 3,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the second fails midway through some" +
            " async work, the first depends on it but has already completed so is not cancell" +
            "ed")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the second fails midway through some" +
            " async work, the first depends on it but has already completed so is not cancell" +
            "ed")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheSecondFailsMidwayThroughSomeAsyncWorkTheFirstDependsOnItButHasAlreadyCompletedSoIsNotCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the second fails midway through some" +
                    " async work, the first depends on it but has already completed so is not cancell" +
                    "ed", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 307
this.ScenarioSetup(scenarioInfo);
#line 308
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 309
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 5 but t" +
                    "hrows an Exception after 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.Then("the first Task is RanToCompletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 313
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
 testRunner.And("the results are 2,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the first fails immediately in synch" +
            "ronous code, the second is cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the first fails immediately in synch" +
            "ronous code, the second is cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheFirstFailsImmediatelyInSynchronousCodeTheSecondIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the first fails immediately in synch" +
                    "ronous code, the second is cancelled", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 319
this.ScenarioSetup(scenarioInfo);
#line 320
 testRunner.Given("I prepare a Factory for a Task which throws an Exception prior to executing any a" +
                    "sync code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 321
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 323
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 324
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 325
 testRunner.And("the second Task is Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.And("the results are 0,0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 328
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the second fails immediately in sync" +
            "hronous code, the first is cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the second fails immediately in sync" +
            "hronous code, the first is cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheSecondFailsImmediatelyInSynchronousCodeTheFirstIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the second fails immediately in sync" +
                    "hronous code, the first is cancelled", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 331
this.ScenarioSetup(scenarioInfo);
#line 332
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 333
 testRunner.And("I prepare a Factory for a Task which throws an Exception prior to executing any a" +
                    "sync code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 335
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 336
 testRunner.Then("the first Task is Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 337
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
 testRunner.And("the results are 0,0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 339
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 340
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the first fails midway through some " +
            "async work, the second depends on it so is cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the first fails midway through some " +
            "async work, the second depends on it so is cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheFirstFailsMidwayThroughSomeAsyncWorkTheSecondDependsOnItSoIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the first fails midway through some " +
                    "async work, the second depends on it so is cancelled", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 343
this.ScenarioSetup(scenarioInfo);
#line 344
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 2 but t" +
                    "hrows an Exception after 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 345
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 347
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.Then("the first Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 349
 testRunner.And("the second Task is probably Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 350
 testRunner.And("the first Result is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 351
 testRunner.And("the second Result is probably less than or equal to 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 352
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Two factory-generated tasks run in parallel, the second fails midway through some" +
            " async work, the first depends on it so is cancelled")]
        [Xunit.TraitAttribute("FeatureTitle", "WhenAllCompleteOrOneFaults")]
        [Xunit.TraitAttribute("Description", "Two factory-generated tasks run in parallel, the second fails midway through some" +
            " async work, the first depends on it so is cancelled")]
        [Xunit.TraitAttribute("Category", "2tasks")]
        [Xunit.TraitAttribute("Category", "usingfactories")]
        public virtual void TwoFactory_GeneratedTasksRunInParallelTheSecondFailsMidwayThroughSomeAsyncWorkTheFirstDependsOnItSoIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two factory-generated tasks run in parallel, the second fails midway through some" +
                    " async work, the first depends on it so is cancelled", new string[] {
                        "2tasks",
                        "usingfactories"});
#line 356
this.ScenarioSetup(scenarioInfo);
#line 357
 testRunner.Given("I prepare a Factory for a Task which increments a number every 50ms until 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 358
 testRunner.And("I prepare a Factory for a Task which increments a number every 50ms until 2 but t" +
                    "hrows an Exception after 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
 testRunner.When("I await the Factory Tasks using WhenAllCompleteOrOneFaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 360
 testRunner.And("the call returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.Then("the first Task is probably Canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 362
 testRunner.And("the second Task is Faulted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 363
 testRunner.And("the first Result is probably less than or equal to 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 364
 testRunner.And("the second Result is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 365
 testRunner.And("the Exception was logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 366
 testRunner.And("no Unobserved Exception was raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WhenAllCompleteOrOneFaultsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WhenAllCompleteOrOneFaultsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
